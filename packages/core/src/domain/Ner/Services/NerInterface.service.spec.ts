import { NerInterfaceService } from "./NerInterface.service";
import { FileProcessor } from "./FileProcessor";
import { TaskHandler } from "./TaskHandler";
import { NEREventDispatcher } from "./NEREventDispatcher";
import { Language } from "../Models/Language";
//import { ChunkList } from "../Models/ChunkList";
jest.mock("./FileProcessor");
jest.mock("./NEREventDispatcher");

describe("NerInterfaceService", () => {
  const mockEventDispatcher = new NEREventDispatcher() as jest.Mocked<NEREventDispatcher>;
  const mockFileProcessor = new FileProcessor(
    {} as TaskHandler,
    mockEventDispatcher
  ) as jest.Mocked<FileProcessor>;
  const service = new NerInterfaceService(
    mockFileProcessor,
    mockEventDispatcher
  );

  beforeEach(() => {
    jest.resetAllMocks();
    jest.clearAllMocks();
  });

  it("should start processing file", async () => {
    const file = Buffer.from("", "base64");
    const fileType = "zip";
    const language = Language.PL;
    mockFileProcessor.process.mockResolvedValue(null);
    await service.processFile(file, fileType, language);

    expect(mockFileProcessor.process).toHaveBeenCalledTimes(1);
    expect(mockFileProcessor.process).toHaveBeenCalledWith(
      file,
      fileType,
      language
    );
  });
  /*
  it("lol", async () => {
    const dataBase64 =
      "";
    const file = Buffer.from(dataBase64, "base64");
    const fileType = "zip";
    const language = Language.PL;
    const NERInterface = NerInterfaceService.get();
    let chunkList: ChunkList = [];
    NERInterface.onSuccess.subscribe((result) => {
      chunkList = result;
    });
    await NERInterface.processFile(file, fileType, language);

    expect(chunkList.length).toBe(1);
    expect(chunkList[0].sentences.length).toBe(15);
    expect(chunkList[0].sentences[0].tokens.length).toBe(1);
    expect(chunkList[0].sentences[1].tokens.length).toBe(0);
    expect(chunkList[0].sentences[2].tokens.length).toBe(2);
    expect(chunkList[0].sentences[3].tokens.length).toBe(0);
    expect(chunkList[0].sentences[4].tokens.length).toBe(1);
    expect(chunkList[0].sentences[5].tokens.length).toBe(0);
    expect(chunkList[0].sentences[6].tokens.length).toBe(0);
    expect(chunkList[0].sentences[7].tokens.length).toBe(0);
    expect(chunkList[0].sentences[8].tokens.length).toBe(1);
    expect(chunkList[0].sentences[9].tokens.length).toBe(0);
    expect(chunkList[0].sentences[10].tokens.length).toBe(0);
    expect(chunkList[0].sentences[11].tokens.length).toBe(0);
    expect(chunkList[0].sentences[12].tokens.length).toBe(0);
    expect(chunkList[0].sentences[13].tokens.length).toBe(0);
    expect(chunkList[0].sentences[14].tokens.length).toBe(0);
  });*/
});
